openapi: 3.0.3
info:
  title: DIPLOM_FINAL
  version: 1.0.0
  description: My diplom for netology
paths:
  /api/v1/user/:
    get:
      operationId: api_v1_user_list
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_v1_user_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/user/{id}/:
    get:
      operationId: api_v1_user_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_v1_user_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_v1_user_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_v1_user_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /cart:
    get:
      operationId: cart_retrieve
      description: Корзина покупателя
      tags:
      - cart
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    post:
      operationId: cart_create
      description: Корзина покупателя
      tags:
      - cart
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    put:
      operationId: cart_update
      description: Корзина покупателя
      tags:
      - cart
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    delete:
      operationId: cart_destroy
      description: Корзина покупателя
      tags:
      - cart
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /categories:
    get:
      operationId: categories_list
      tags:
      - categories
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: categories_create
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /order:
    get:
      operationId: order_retrieve
      description: Заказы
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    post:
      operationId: order_create
      description: Заказы
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /partner/orders:
    get:
      operationId: partner_orders_retrieve
      description: Функция для получения заказов поставщиками
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /partner/state:
    get:
      operationId: partner_state_retrieve
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    post:
      operationId: partner_state_create
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /partner/update:
    post:
      operationId: partner_update_create
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /products:
    get:
      operationId: products_retrieve
      tags:
      - products
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /shops:
    get:
      operationId: shops_list
      tags:
      - shops
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shop'
          description: ''
    post:
      operationId: shops_create
      tags:
      - shops
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Shop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Shop'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
  /user/contact:
    get:
      operationId: user_contact_retrieve
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    post:
      operationId: user_contact_create
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    delete:
      operationId: user_contact_destroy
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /user/details:
    get:
      operationId: user_details_retrieve
      description: Просмотр и изменение данных пользователя
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
    post:
      operationId: user_details_create
      description: Просмотр и изменение данных пользователя
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /user/login:
    post:
      operationId: user_login_create
      description: Авторизация
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /user/passwordreset:
    post:
      operationId: user_passwordreset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /user/passwordreset/confirm:
    post:
      operationId: user_passwordreset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /user/register:
    post:
      operationId: user_register_create
      description: Регистрация покупателя
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /user/register/confirm:
    post:
      operationId: user_register_confirm_create
      description: Подтверждение регистрации
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 50
        shops:
          type: array
          items:
            type: integer
            title: Магазины
          title: Магазины
      required:
      - id
      - name
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        city:
          type: string
          title: Город
          maxLength: 50
        street:
          type: string
          title: Улица
          maxLength: 50
        house:
          type: string
          title: Дом
          maxLength: 50
        structure:
          type: string
          title: Корпус
          maxLength: 50
        building:
          type: string
          title: Строение
          maxLength: 50
        apartment:
          type: string
          title: Квартира
          maxLength: 50
        phone:
          type: string
          title: Телефон
          maxLength: 50
        user:
          type: integer
          writeOnly: true
          title: Пользователь
      required:
      - city
      - id
      - phone
      - street
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordToken:
      type: object
      properties:
        password:
          type: string
          title: Пароль
        token:
          type: string
      required:
      - password
      - token
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          readOnly: true
        password:
          type: string
          title: Пароль
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: Последний вход
        is_superuser:
          type: boolean
          title: Статус суперпользователя
          description: Указывает, что пользователь имеет все права без явного их назначения.
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        is_staff:
          type: boolean
          title: Статус персонала
          description: Отметьте, если пользователь может входить в административную
            часть сайта.
        date_joined:
          type: string
          format: date-time
          title: Дата регистрации
        email:
          type: string
          format: email
          maxLength: 254
        company:
          type: string
          title: Компания
          maxLength: 50
        position:
          type: string
          title: Должность
          maxLength: 50
        is_active:
          type: boolean
          title: Active
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: Тип пользователя
        groups:
          type: array
          items:
            type: integer
            title: Группы
          title: Группы
          description: Группы, к которым принадлежит данный пользователь. Пользователь
            получит все права, указанные в каждой из его/её групп.
        user_permissions:
          type: array
          items:
            type: integer
            title: Права пользователя
          title: Права пользователя
          description: Индивидуальные права данного пользователя.
    Shop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 50
        url:
          type: string
          format: uri
          nullable: true
          title: Ссылка на файл прайса
          maxLength: 200
        state:
          type: boolean
          title: Cтатус получения заказов
        user:
          type: integer
          nullable: true
          title: Пользователь
      required:
      - id
      - name
    TypeEnum:
      enum:
      - shop
      - buyer
      type: string
      description: |-
        * `shop` - Магазин
        * `buyer` - Покупатель
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          readOnly: true
        password:
          type: string
          title: Пароль
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: Последний вход
        is_superuser:
          type: boolean
          title: Статус суперпользователя
          description: Указывает, что пользователь имеет все права без явного их назначения.
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        is_staff:
          type: boolean
          title: Статус персонала
          description: Отметьте, если пользователь может входить в административную
            часть сайта.
        date_joined:
          type: string
          format: date-time
          title: Дата регистрации
        email:
          type: string
          format: email
          maxLength: 254
        company:
          type: string
          title: Компания
          maxLength: 50
        position:
          type: string
          title: Должность
          maxLength: 50
        is_active:
          type: boolean
          title: Active
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: Тип пользователя
        groups:
          type: array
          items:
            type: integer
            title: Группы
          title: Группы
          description: Группы, к которым принадлежит данный пользователь. Пользователь
            получит все права, указанные в каждой из его/её групп.
        user_permissions:
          type: array
          items:
            type: integer
            title: Права пользователя
          title: Права пользователя
          description: Индивидуальные права данного пользователя.
      required:
      - contacts
      - email
      - id
      - password
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
